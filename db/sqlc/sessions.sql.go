// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: sessions.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, ip_address, user_agent, payload, last_activity, user_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, ip_address, user_agent, payload, last_activity, user_id, created_at, updated_at
`

type CreateSessionParams struct {
	ID           string         `json:"id"`
	IpAddress    sql.NullString `json:"ip_address"`
	UserAgent    sql.NullString `json:"user_agent"`
	Payload      string         `json:"payload"`
	LastActivity int64          `json:"last_activity"`
	UserID       int64          `json:"user_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.queryRow(ctx, q.createSessionStmt, createSession,
		arg.ID,
		arg.IpAddress,
		arg.UserAgent,
		arg.Payload,
		arg.LastActivity,
		arg.UserID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.IpAddress,
		&i.UserAgent,
		&i.Payload,
		&i.LastActivity,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions WHERE last_activity > $1
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context, lastActivity int64) error {
	_, err := q.exec(ctx, q.deleteExpiredSessionsStmt, deleteExpiredSessions, lastActivity)
	return err
}

const deleteSessionByUserId = `-- name: DeleteSessionByUserId :exec
DELETE FROM sessions WHERE user_id = $1
`

func (q *Queries) DeleteSessionByUserId(ctx context.Context, userID int64) error {
	_, err := q.exec(ctx, q.deleteSessionByUserIdStmt, deleteSessionByUserId, userID)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, ip_address, user_agent, payload, last_activity, user_id, created_at, updated_at FROM sessions WHERE id = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, id string) (Session, error) {
	row := q.queryRow(ctx, q.getSessionByTokenStmt, getSessionByToken, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.IpAddress,
		&i.UserAgent,
		&i.Payload,
		&i.LastActivity,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
