// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: role.sql

package sqlc

import (
	"context"
)

const attachPermissionToRole = `-- name: AttachPermissionToRole :one
INSERT INTO permission_role (permission_id, role_id) VALUES ($1, $2) RETURNING id, permission_id, role_id, created_at, updated_at
`

type AttachPermissionToRoleParams struct {
	PermissionID int64 `json:"permission_id"`
	RoleID       int64 `json:"role_id"`
}

func (q *Queries) AttachPermissionToRole(ctx context.Context, arg AttachPermissionToRoleParams) (PermissionRole, error) {
	row := q.queryRow(ctx, q.attachPermissionToRoleStmt, attachPermissionToRole, arg.PermissionID, arg.RoleID)
	var i PermissionRole
	err := row.Scan(
		&i.ID,
		&i.PermissionID,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name) VALUES ($1) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateRole(ctx context.Context, name string) (Role, error) {
	row := q.queryRow(ctx, q.createRoleStmt, createRole, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
